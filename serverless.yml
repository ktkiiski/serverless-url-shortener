# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: url-shortener # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: ">=1.14.0 <1.15.0"

# Custom configuration for the app
custom:
  hostedZone: kii.ski
  stage: ${opt:stage, self:provider.stage}
  bucketName: kii-ski-${self:custom.stage}
  bucketDomain: ${self:custom.bucketName}.s3-website.${self:provider.region}.amazonaws.com
  # Custom domains for stages. If missing, we use the defaultStageDomain
  stageDomains:
    prod: ${self:custom.hostedZone}
  defaultStageDomain: "${self:custom.stage}.${self:custom.hostedZone}"
  stageDomain: ${self:custom.stageDomains.${self:custom.stage}, self:custom.defaultStageDomain}

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-central-1
  stage: prod

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: "arn:aws:s3:::${self:custom.bucketName}"
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource: "arn:aws:s3:::${self:custom.bucketName}/*"

  # Environment variables for all the functions
  environment:
    S3_BUCKET: ${self:custom.bucketName}
    S3_REGION: ${self:provider.region}
    DOMAIN: ${self:custom.stageDomain}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  shortenUrl:
    handler: handler.shortenUrl
    events:
      - http:
          path: /urls
          method: post

# you can add CloudFormation resource templates here
resources:
  Resources:
    # S3 bucket for storing the URL resources
    S3BucketForURLs:
      Type: 'AWS::S3::Bucket'
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:custom.bucketName}
        WebsiteConfiguration:
          # This does not matter as it cannot be reached
          IndexDocument: index.html
    # Make contents of the bucket public for everyone
    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: ${self:custom.bucketName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: AddPerm
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: "arn:aws:s3:::${self:custom.bucketName}/*"
    # CloudFront distribution used as a front end to the app
    CloudFrontDistrib:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.stageDomain}
          Origins:
            - DomainName: ${self:custom.bucketDomain}
              Id: OriginRedirect
              OriginPath: /u
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
            - DomainName: ${self:custom.bucketDomain}
              Id: OriginAdmin
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
            - DomainName:
                Fn::Join:
                  - ''
                  - - Ref: ApiGatewayRestApi
                    - ".execute-api.${self:provider.region}.amazonaws.com"
              Id: OriginAPIGW
              CustomOriginConfig:
                OriginProtocolPolicy: match-viewer
          Comment: >-
            CloudFront distribution used as a front end to the URL shortener app
          Enabled: true
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: false
            TargetOriginId: OriginRedirect
            # TODO: Set up certificate and use redirect-to-https instead
            ViewerProtocolPolicy: allow-all
          CacheBehaviors:
            - ForwardedValues:
                QueryString: false
              TargetOriginId: OriginAdmin
              # TODO: Set up certificate and use redirect-to-https instead
              ViewerProtocolPolicy: allow-all
              PathPattern: /admin/*
            - AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              ForwardedValues:
                Headers:
                  - Origin
                  - Referer
                QueryString: false
              TargetOriginId: OriginAPIGW
              ViewerProtocolPolicy: https-only
              PathPattern: /${self:custom.stage}/*
    # Set up the DNS for the site
    DNS:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${self:custom.hostedZone}.
        Comment: Zone apex alias targeted to CloudFront.
        RecordSets:
        - Name: ${self:custom.stageDomain}.
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              Fn::GetAtt: [ CloudFrontDistrib, DomainName ]
  Outputs:
    CloudFrontDomain:
      Description: "CloudFront distribution domain name"
      Value:
        Fn::GetAtt: [ CloudFrontDistrib, DomainName ]
    CloudFrontUrl:
      Description: "CloudFront distribution domain name"
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Fn::GetAtt: [ CloudFrontDistrib, DomainName ]
            - '/'
